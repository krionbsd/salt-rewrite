name: Tests

on: [push, pull_request]

jobs:
  Linting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Linting
        run: |
          pip install pre-commit
          pre-commit run --all-files
          poetry run pylint src/ tests/

  Linux:
    needs: Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full python version
      id: full-python-version
      run: |
        echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Install and set up Poetry
      run: |
        pip install poetry
        poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v1
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry install
    - name: Test
      run: |
        poetry run coverage run -m pytest -q tests
        poetry run coverage combine
        poetry run coverage report --fail-under=50 --show-missing
        poetry run coverage xml

    - name: Build CodeCov Flags
      id: codecov-flags
      run: |
        echo ::set-output name=py_version::$(python -c "import sys; print('py{}{}'.format(*sys.version_info))")

    - name: Upload Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        #file: ./coverage.xml #optional
        flags: linux,${{ steps.codecov-flags.outputs.py_version }}
        name: Linux-Py${{ matrix.python-version }} #optional
        #yml: ./codecov.yml #optional
        fail_ci_if_error: true #optional (default = false)

  macOS:
    needs: Linting
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full python version
      id: full-python-version
      run: |
        echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Install and set up Poetry
      run: |
        pip install poetry
        poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v1
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry install
    - name: Test
      env:
        OBJC_DISABLE_INITIALIZE_FORK_SAFETY: YES
      run: |
        poetry run coverage run -m pytest -q tests
        poetry run coverage combine
        poetry run coverage report --fail-under=50 --show-missing
        poetry run coverage xml

    - name: Build CodeCov Flags
      id: codecov-flags
      run: |
        echo ::set-output name=py_version::$(python -c "import sys; print('py{}{}'.format(*sys.version_info))")

    - name: Upload Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        #file: ./coverage.xml #optional
        flags: macos,${{ steps.codecov-flags.outputs.py_version }}
        name: macOS-Py${{ matrix.python-version }} #optional
        #yml: ./codecov.yml #optional
        fail_ci_if_error: true #optional (default = false)

#  Windows:
#    needs: Linting
#    runs-on: windows-latest
#    strategy:
#      matrix:
#        python-version: [3.6, 3.7, 3.8]
#
#    steps:
#    - uses: actions/checkout@v1
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v1
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Get full python version
#      id: full-python-version
#      shell: bash
#      run: |
#        echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
#    - name: Install and setup Poetry
#      run: |
#        pip install poetry
#        poetry config virtualenvs.in-project true
#    - name: Set up cache
#      uses: actions/cache@v1
#      with:
#        path: .venv
#        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
#    - name: Install dependencies
#      run: |
#        poetry install
#    - name: Test
#      run: |
#        poetry run pytest -q tests
